/**
 * Copyright (C) 2018, Hao Hou
 */
package plumber.std_servlet.network.http.render.v0;

/**
 * The status code. We do not have status code such as 500. Since it indicates the unexpected error 
 * of the internal implementation, so it's issued automatically 
 **/
type StatusCode {
	uint16        OK                     = 200;   /*!< The Status code for HTTP OK */
	uint16        PARTIAL                = 206;   /*!< The status code for HTTP partial content */

	uint16        MOVED_PERMANENTLY      = 301;   /*!< The Status code for Move permanently */
	uint16        MOVED_TEMPORARILY      = 302;   /*!< The status code for move temporarily */
	uint16        NOT_MODIFIED           = 304;   /*!< The status code for the reuqest is not changed */
	uint16        REDIR_PERMANENTLY      = 307;   /*!< The Status code for redirect permanently, which means almost 301, but should replay the same method */
	uint16        REDIR_TEMOORARILY      = 308;   /*!< Similar to REDIR_PERMANENTLY */

	uint16        BAD_REQUEST            = 400;   /*!< Bad request status code */
	uint16        UNAUTORIZED            = 401;   /*!< Unautorized */
	uint16        FORBIDEN               = 403;   /*!< The forbiden response */
	uint16        NOT_FOUND              = 404;   /*!< Page not found */
	uint16        METHOD_NOT_ALLOWED     = 405;   /*!< Method is not allowed */
	uint16        NOT_ACCEPTABLE         = 406;   /*!< The content negotiation failure */
	uint16        RANGE_NOT_SATISFIABLE  = 416;   /*!< The bad range error code */

	uint16        status_code;                 /*!< The actual status code */
};

/**
 * Actual response to render
 **/
type Response {
	StatusCode            status;                                   /*!< The HTTP status code */
	
	uint32                BODY_CAN_COMPRESS = 1;                    /*!< The body can be compressed */
	uint32                BODY_SIZE_UNKNOWN = 2;                    /*!< The constant that indicates we don't know the size of the body. */
	uint32                BODY_SEEKABLE     = 4;                    /*!< The constant that indicates the body is rangable */
	uint32                BODY_RANGED       = 8;                    /*!< Indicates this body is a ranged one */

	uint32                body_flags;                               /*!< The flags for the body */
	uint64                body_size;                                /*!< The size of the HTTP body */

	uint64                range_begin;                              /*!< The begin offset of the range */
	uint64                range_end;                                /*!< The end offset of the range */
	uint64                range_total;                              /*!< The total size of the ranged content */

	alias body_rls.token  body_object;                              /*!< The body object */
	plumber.std.request_local.MemoryObject body_rls;                /*!< The RLS token for the body object. If this is a invalid object, we should put the data to pipe data body */

	plumber.std.request_local.String mime_type;                     /*!< The MIME type for current response */

	plumber.std.request_local.String redirect_location;             /*!< The location for the redirect response, when this is given, the status code should be any redirect code */

	/* TODO: Cookie and other kinds of field as well, also cache controll, etc */
};
