#!@PYTHON_PROGRAM@
import sys, subprocess, os, json
pscript_path = r"@CMAKE_CURRENT_BINARY_DIR@/bin/pscript"
pscript_lib  = r"@CMAKE_CURRENT_SOURCE_DIR@/tools/pscript/pss/"
servlet_path = r"@CMAKE_CURRENT_BINARY_DIR@/bin/servlet"
testing_pss  = r"@CMAKE_CURRENT_SOURCE_DIR@/test/servlet-test.pss"
proto_inst   = r"@CMAKE_CURRENT_BINARY_DIR@/install-prototype.sh"

servlet_name = sys.argv[1]

proto_name   = r"@CMAKE_CURRENT_SOURCE_DIR@/servlets/{name}/test/test.ptype".format(name = servlet_name)

case_name = sys.argv[2]

env = os.environ.copy()
env['PROTO_DB_ROOT'] = r"@CMAKE_CURRENT_BINARY_DIR@/bin/test/protodb.root"
devnull = open(os.devnull, "wb");
pi = subprocess.Popen(["/bin/sh", proto_inst], env = env, stdout = devnull, stderr = devnull)
pi.wait()

if os.path.exists(proto_name):
    pi = subprocess.Popen([r"@CMAKE_CURRENT_BINARY_DIR@/bin/protoman", "-R", env['PROTO_DB_ROOT'], "--update", "--yes", "--force", proto_name], stdout = devnull, stderr = devnull)
    pi.wait()


valgrind = [x for x in "@SERVLET_VALGRIND_PARAM@".split(";") if x]

cmdline = [pscript_path, "-P", env['PROTO_DB_ROOT'], 
           "-M", pscript_lib, "-S", servlet_path, testing_pss,
           "-s", r"@CMAKE_CURRENT_SOURCE_DIR@/servlets/{test}/test/{case}/servlet-def.pss".format(test = servlet_name, case = case_name),
           "-i", r"@CMAKE_CURRENT_SOURCE_DIR@/servlets/{test}/test/{case}/input.txt".format(test = servlet_name, case = case_name),
           "-o", "/dev/stdout"]

print("Running testing PSS script ", " ".join(cmdline))

tester = subprocess.Popen(valgrind + cmdline, stdout = subprocess.PIPE)
result = tester.wait()

def parse_result(results):
    ret = {}
    buffer = ""
    name = ""
    for result in results:
        result = result.strip()
        if result and result.split()[0] == ".OUTPUT":
            buffer = ""
            name = result.split()[1]
        elif result and result == ".END":
            try:
                ret[name] = json.loads(buffer)
            except:
                return {"____raw_result____": buffer }
        else:
            buffer += "\n" 
            buffer += result
    return ret

def print_json(value):
    if type(value) is dict:
        json.dump(value, sys.stdout, sort_keys=True, indent=4)
        sys.stdout.write("\n")
    else:
        print(value)

if result == 0:
    results = parse_result(tester.stdout.readlines())
    expected = parse_result(file(r"@CMAKE_CURRENT_SOURCE_DIR@/servlets/{test}/test/{case}/output.txt".format(test = servlet_name, case = case_name)).readlines())
    keys = set(list(results.keys()) + list(expected.keys()))
    for key in keys:
        actual = results.get(key, "")
        expect = expected.get(key, "")
        if actual != expect:
            print("Case %s failure " % key)
            print("expected:") 
            print_json(expect)
            print("but got :") 
            print_json(actual)
            result = 1
if result == 0:
    print("All test cases are OK!")
sys.exit(result)
