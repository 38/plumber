/**
 * Copyright (C) 2017, Hao Hou
 **/

/**
 * @brief Create an empty list
 * @return The empty list
 * @note In PScript, the list is actually a dictionary with numeric key
 **/
List.empty = function List.empty()
{
	return {};
}

/**
 * @brief Generate the list of numbers from variable from to variable to [from, to)
 * @param from The left side of the range. If the to is undefined, the range will be set to [0, from)
 * @param to The right side of the range. If this is undefined, the range will be [0, from)
 * @return The list
 **/
List.range = function List.range(from, to)
{
	var ret = List.empty();
	if(to == undefined)
	{
		to = from;
		from = 0;
	}
	for(var i = 0; from < to; from ++)
		ret[i ++] = from;
	return ret;
}

/**
 * @brief Append a new item to the list
 * @param list The list to append
 * @param item The item to append
 * @return The list
 * @note The list is a reference object, thus the return list
 *       and orignal list are the same object.
 */
List.append = function List.append(list, item)
{
	var length = len(list);
	list[length] = item;
	return list;
}

/**
 * @brief Extract a subsequence of the list
 * @param list The original list
 * @param left The left side of the range
 * @param right The right side of the range
 * @note If the left side param is undefined, it will set of 0 by default
 *       If the right side param is undefined it will be set to the length of the list.
 * @return The result list
 */
List.slice = function List.slice(list, left, right)
{
	var ret = List.empty();

	if(right == undefined) right = len(list);
	if(left == undefined) left = 0;
	for(var i = left; i < right; i ++)
		ret[i - left] = list[i];
	return ret;
}

/**
 * @brief Map the list to antoher list using given function
 * @param func The function to apply
 * @param list The target list
 * @return The result
 **/
List.map = function List.map(func, list)
{
	var ret = List.empty();
	var length = len(list);
	for(var i = 0; i < length; i ++)
		ret[i] = func(list[i]);
	return ret;
}

/**
 * @brief Reduce the list to a single value using the given function
 * @note This is similar to python's reduce function
 * @param func The function used to reduce values
 * @param list The list to reduce
 * @return The result result
 **/
List.reduce = function List.reduce(func, list)
{
	var ret = undefined;
	var length = len(list);

	if(length > 0) ret = list[0];

	for(var i = 1; i < length; i ++)
		ret = func(ret, list[i]);

	return ret;
}

List.filter = function List.filter(f, l)
{
	var length = len(l);
	var i = 0, j = 0;
	var ret = List.empty();

	for(var i = 0, j = 0; i < length; i ++)
		if(f(l[i])) ret[j++] = l[i];
	return ret;
}

/**
 * @brief Print the content of the list to screen
 * @param list The list to print
 * @return nothing
 **/
List.print = function List.print(list)
{
	var buf = "[";
	var length = len(list);
	for(var i = 0; i < length; i ++)
	{
		if(i > 0) buf = buf + ", ";
		buf = buf + list[i];
	}
	print(buf, "]")
}

/**
 * @brief Concatenate the left list and right list
 * @param left The left list
 * @param right The right list
 * @param The concatenated list
 **/
List.concat = function List.concat(left, right)
{
	var ret = List.empty();
	var ll = len(left);
	var rl = len(right);
	for(var i = 0; i < ll; i ++)
		ret[i] = left[i];
	for(var i = 0; i < rl; i ++)
		ret[i + ll] = right[i];
	return ret;
}

/**
 * @brief Sort the list
 * @param list The list to sort
 * @param comp The comprasion function, if this is undefined, using the default order
 * @return The sorted list (this is different object than the input list)
 **/
List.sort = function(list)
{
	var __qsort = function __sort(list, comp, qsort)
	{
		if(len(list) < 2) return list;
		var p = list[0];
		var left  = List.empty();
		var equal = List.empty();
		var right = List.empty();
		var length = len(list);
		for(var i = 0; i < length; i ++)
		{
			var current = list[i];
			var cmpres = comp(current, p);
			if(cmpres < 0)
				List.append(left, current);
			else if(cmpres > 0)
				List.append(right, current);
			else
				List.append(equal, current);
		}
		return List.concat(List.concat(qsort(left, comp, qsort), equal), qsort(right, comp, qsort));
	}

	return function List.sort(list, comp)
	{
		if(comp == undefined)
		{
			comp = function(x, y)
			{
				if(x < y) return -1;
				if(x > y) return 1;
				return 0;
			}
		}
		return __qsort(list, comp, __qsort);
	}
}();

/**
 * @brief Zip two list, which means a list [[a[k], b[k]] for k in 0..len]
 * @param a The list a
 * @param b The list b
 * @return The result list
 **/
List.zip = function List.zip(a, b)
{
	var la = len(a);
	var lb = len(b);
	var l = la;
	if(la > lb) l = lb;
	var ret = List.empty();

	for(var i = 0; i < l; i++)
	{
		ret[i] = List.empty();
		ret[i][0] = a[i];
		ret[i][1] = b[i];
	}

	return ret;
}

