/**
 * Copyright (C) 2017, Hao Hou
 * The service utilities
 **/
/**
 * @brief Traverse the service
 * @param serv The service to traverse
 * @param handler The handle function dictionary: 
 *                <node, function node_handle(node_name, node_def)>                                Traverse the node
 *                <pipe, function pipe_handle(src_node, src_port, dst_node, dst_port)>             Traverse the pipe
 *                <rev_pipe, function rev_pipe_handle(src_node, src_port, dest_node, dest_port)>   Traverse the inversed pipe
 *                <port_handle, function port_handle(port_name, node, pipe_name, pipe_type)>       Traverse the port
 *                <input_handle, function input_handle(node, pipe_name)>                           Hnadle the input port
 *                <output_handle, function output_handle(node, pipe_name)>                         Handle the output port
 * @return nothing
 **/
Service.for_each_element = function Service.for_each_element(serv, handler)
{
	var _get_func = function(name)
	{
		var ret = handler[name];
		if(ret == undefined) return function(){};
		return ret;
	}
	var node_handle = _get_func("node");
	var pipe_handle = _get_func("pipe");
	var rev_pipe_handle = _get_func("rev_pipe");
	var port_handle = _get_func("port");
	var input_handle = _get_func("input");
	var output_handle = _get_func("output");
	for(var key in serv)
	{
		var sp = split(key, "@");
		var lsp = len(sp);
		if(lsp == 1) 
			node_handle(key, serv[key]);
		else
		{
			if(lsp == 2)
			{
				var src_node = sp[1];
				var dests = serv[key];
				for(var src_port in dests)
				{
					/* Key is port name and value should be nodeName@portName */
					var dsp = split(dests[src_port], "@");
					var dst_node = dsp[0];
					var dst_port = dsp[1];
					if(sp[0] == "")
						pipe_handle(src_node, src_port, dst_node, dst_port);
					else if(sp[0] == "!")
						rev_pipe_handle(src_node, src_port, dst_node, dst_port);
				}
			}
			else if(lsp == 3 && sp[0] == "")
			{
				var dst = split(serv[key], "@");
				var dst_node = dst[0];
				var dst_port = dst[1];
				if(sp[1] == "input")
				{
					if(sp[2] == "") input_handle(dst_node, dst_port);
					else port_handle(sp[2], dst_node, dst_port, "input");
				}
				else if(sp[1] == "output")
				{
					if(sp[2] == "") output_handle(dst_node, dst_port);
					else port_handle(sp[2], dst_node, dst_port, "output");
				}
			}
		}
	}
};

/**
 * @brief Dynamically add a new node to the service graph
 * @param serv The target service graph
 * @param name The name of the node
 * @param init_arg The initialization string of the servlet or the logic servlet object
 * @return nothing
 **/
Service.add_node = function Service.add_node(serv, name, init_arg)
{
	serv[name] = init_arg;
	if(serv["@" + name] == undefined)
		serv["@" + name] = {};
	if(serv["!@" + name] == undefined)
		serv["!@" + name] = {};
}

/**
 * @brief Dyanmically add a pipe between the source to destination
 * @param serv The target service graph
 * @param src_node The node of the source
 * @param src_port The port name of the source
 * @param dst_port The port name of the destination
 * @param dst_node The node of the destination
 * @return nothing
 **/
Service.add_pipe = function Service.add_pipe(serv, src_node, src_port, dst_port, dst_node) 
{
	if(serv["@"+ src_node] == undefined)
		serv["@" + src_node] = {};
	if(serv["!@" + dst_node] == undefined)
		serv["!@" + dst_node] = {};
	serv["@" + src_node][src_port] = dst_node + "@" + dst_port;
	serv["!@" + dst_node][dst_port] = src_node + "@" + src_port;
}

/**
 * @brief Add the input port
 * @param serv The target service graph
 * @param name The name of the port
 * @param node The node name 
 * @param port The name of the port
 * @return nothing
 **/
Service.add_in_port = function Service.add_in_port(serv, name, node, port)
{
	serv["@input@" + name] = node + "@" + port; 
}

/**
 * @brief Add the output port
 * @param serv The target service graph
 * @param name The name of the port
 * @param node The node name 
 * @param port The name of the port
 * @return nothing
 **/
Service.add_out_port = function Service.add_out_port(serv, name, node, port)
{
	serv["@output@" + name] = node + "@" + port;
}

var _add_merger_or_splitter = function _add_merger_or_splitter(serv, splitter, merger) 
{
	var downstream = {};
	var upstream = {};
	var inputs = {};
	var outputs = {};
	var _get_pipe_handle = function(result) {
		return function _pipe(src_node, src_port, dst_node, dst_port) 
		{
			var key = dst_node + "@" + dst_port; 
			var val = src_node + "@" + src_port;
			if(result[key] == undefined) result[key] = {};
			var n = len(result[key]);
			result[key][n] = val
		}
	}

	var _get_io_handle = function(result) 
	{
		return function _io_port(node, port) 
		{
			if(result[""] == undefined) result[""] = {}
			var n = len(result[""]);
			result[""][n] = node + "@" + port;
		}
	}

	var _get_port_handle = function(input_result, output_result) 
	{
		return function _port(name, node, port, dir)
		{
			var result;
			if(dir == "input") result = input_result;
			else result = output_result;
			if(result[key] == undefined) result[key] = {};
			var n = len(result);
			result[key][n] = node + "@" + port;
		}
	}

	Service.for_each_element(serv, {
		pipe: _get_pipe_handle(upstream), 
		rev_pipe: _get_pipe_handle(downstream)
	});

	var _modify_graph = function _modify_graph(from, to)
	{
		var name, args, is_merge, set, sp;

		if(typeof(from) == "dict") 
		{
			sp = split(to, "@");
			name = "__merger_";
			args = merger + " " + len(from);
			is_merger = 1;
			set = from;
		}
		else
		{
			sp = split(from, "@");
			name = "__splitter_";
			args = splitter + " " + len(to);
			is_merger = 0;
			set = to;
		}

		if(len(set) < 2) return undefined;

		var is_port = (len(sp) == 1);

		if(is_port) name += "port_" + sp[0];
		else name += sp[0] + "_" + sp[1];

		Service.add_node(serv, name, args);

		if(is_merger)
		{
			if(is_port) Service.add_out_port(serv, sp[0], name, "out");
			else Service.add_pipe(serv, name, "out", sp[1], sp[0]);
		}
		else
		{
			if(is_port) Service.add_in_port(serv, sp[0], name, "in");
			else Service.add_pipe(serv, sp[0], sp[1], "in", name);
		}

		for(var i in set)
		{
			var str = set[i];
			var sp = split(str, "@");
			if(is_merger) Service.add_pipe(serv, sp[0], sp[1], "in" + i, name);
			else Service.add_pipe(serv, name, "out" + i, sp[1], sp[0]);
		}
	}

	/* for(var input in inputs)
		_modify_graph(input, inputs[input]); */

	for(var from_str in downstream)
		_modify_graph(from_str, downstream[from_str]);

	/*for(var output in outputs)
		_modify_graph(outputs[output], output); */

	for(var to_str in upstream)
		_modify_graph(upstream[to_str], to_str);
}

/**
 * @brief Do the preprocess of the service
 * @param serv The service to preprocess
 * @note This function actually do the preprocess before the service gets started.
 *       Current stage the preprocess only rewrite the graph for merges and splits.
 *       But later we may use this function to rewrite the graph thus we can deploy it
 *       for a cluster
 **/
Service.preprocess = function Service.preprocess(serv) 
{
	_add_merger_or_splitter(serv, "dataflow/dup", "dataflow/firstnonempty");
}

/**
 * @brief Build the exotic service object from the service description
 * @param serv The service to build
 * @note This function actually convert the dictionary based service description to the
 *       internal object used by Plumber framework to run the application. 
 * @return The newly created exotic service object
 **/
Service.build = function(serv)
{
	var _build = function _build_impl(serv, obj, build, prefix, nodemap) 
	{
		_add_merger_or_splitter(serv, "dataflow/dup", "dataflow/firstnonempty");
		var nodes = {};
		var ports = {};
		var _deref_port = function _deref_port(node, port)
		{
			if(prefix != "" && node == "__dummy__" && port == "__dummy__")
				return "__dummy__";

			if(nodes[node] == undefined)
				log("warning", "Could not find node named " + node);
			var nid = nodes[node];
			if(typeof(nid) == "dict") return nid[port];
			return {node: nid, port: port};
		};
		var node_handler = function _node_handler(name, def)
		{
			if(typeof(def) == "dict")
				nodes[name] = build(def, obj, build, prefix + "@" + name, nodemap);
			else
			{
				nodes[name] = __service_node(obj, def);
				if(nodemap != undefined) nodemap[prefix + "@" + name] = nodes[name];
			}
		};
		var pipe_handler = function _pipe_handler(src_node, src_port, dst_node, dst_port) 
		{
			var src = _deref_port(src_node, src_port);
			var dst = _deref_port(dst_node, dst_port);

			if(src == "__dummy__" || dst == "__dummy__") 
				return undefined;

			__service_pipe(obj, src["node"], src["port"], dst["node"], dst["port"]);
		};
		var port_handler = function _port_handler(name, node, port)
		{
			ports[name] = _deref_port(node, port);
		};
		var input_handler = function _input_handler(node, port)
		{
			var target = _deref_port(node, port);

			if(target == "__dummy__")
				log("warning", "Invalid use of dummy port as input");

			__service_input(obj, target["node"], target["port"]);
		};
		var output_handler = function _output_handler(node, port)
		{
			var target = _deref_port(node, port);
			
			if(target == "__dummy__")
				log("warning", "Invalid use of dummy port as output");
			
			__service_output(obj, target["node"], target["port"]);
		};

		Service.for_each_element(serv, {node: node_handler}); 
		Service.for_each_element(serv, {pipe: pipe_handler, port: port_handler, input: input_handler, output: output_handler});
		return ports;
	}
	
	return function Service.build(serv, nodemap) {
		var obj = __service_new();
		_build(serv, obj, _build, "", nodemap);
		return obj;
	}
}();

/**
 * @brief Start the given service graph
 * @param serv The service graph to start
 * @note This function will convert the PScript interpreter to the serving mode. 
 *       However, if the runtime.daemon.id is not an empty string.
 *       The application won't run in current process, instead it start a deamon 
 *       runs the service
 * @return nothing
 **/
Service.start = function Service.start(serv) 
{
	var serv_obj = Service.build(serv);
	__service_start(serv_obj);
}

/**
 * @brief Print the visualization graph dot source for the service
 * @param serv The target service
 * @return nothing
 **/
Service.visualize = function Service.visualize(serv) 
{
	print("digraph {");
	
	var obj = __service_new();

	var node_handler = function node_handler(name, def) 
	{
		var type = typeof(def);
		var ports;
		if(type == "string")
		{
			var nid = __service_node(obj, def);
			ports = __service_node_ports(obj, nid);
		}
		else if(type == "dict")
		{
			ports = {input:{}, output:{}};
			var in_count = 0;
			var out_count = 0;
			for(var key in def)
			{
				var parts = split(key, "@");
				if(len(parts) == 3)
				{
					if(parts[0] == "" && parts[2] != "")
					{
						if(parts[1] == "input")
							ports["input"][in_count ++] = parts[2];
						else if(parts[1] == "output")
							ports["output"][out_count ++] = parts[2];
					}
				}
			}
		}

		if(ports != undefined)
		{
			var inputs = ports["input"];
			var outputs = ports["output"];
			var _dump_ports = function(port_list, avoid)
			{
				var ret = "{"
				var sep = 0;
				for(var i in port_list)
				{
					var port = port_list[i];
					if(avoid[port] == undefined)
					{
						if(sep) ret += "|";
						ret += "<P" + port + ">" + port;
						sep = 1;
					}
				}
				return ret + "}";
			}
			var nodestr = "\tnode_" + name + "[shape = Mrecord, label = \"{" + 
						  	_dump_ports(ports["input"], {}) + 
							"|{<P__null__>N|" + name + "|<P__error__>E}|" + 
							_dump_ports(ports["output"], {__null__:1, __error__:1}) + "}\"];"
			print(nodestr);
		}
	}
	
	var _p = function (node, port)
	{
		return "node_" + node + ":P" + port;
	}

	var pipe_handler = function _pipe_handler(src_node, src_port, dst_node, dst_port) 
	{
		print("\t" + _p(src_node, src_port) + "->" + _p(dst_node, dst_port));
	}

	var port_handler = function _port_handler(name, node, port, dir)
	{
		var port_node = "port_" + name;
		print("\t" + port_node + "[shape = ellipse, label=\"" + name + "\"];");
		if(dir == "input")
			print("\t" + port_node + "->" + _p(node, port));
		else 
			print("\t" + _p(node, port) + "->" + port_node);
	}

	var input_handler = function _input_handler(node, port) 
	{
		print("\tinput[shape = ellipse];");
		print("\tinput->" + _p(node, port));
	}
	var output_handler = function _output_handler(node, port)
	{
		print("\toutput[shape = ellipse];");
		print("\t" + _p(node, port) + "->output;");
	}
	
	Service.for_each_element(serv, {node: node_handler, pipe: pipe_handler, port: port_handler, input: input_handler, output: output_handler});

	print("}");
}

/**
 * @brief Print the type infomation for each servlet ports of the given service
 * @param serv The service to print
 * @return The dictionary that contains all the type information
 **/
Service.typeinfo = function typeinfo(serv) 
{
	var ret = {};
	var nodes = {};
	var obj = Service.build(serv, nodes);
	var port_list = {};
	for(var node in nodes)
		port_list[node] = __service_node_ports(obj, nodes[node]);
	
	for(var node in nodes)
	{
		var nid = nodes[node];
		var inputs = port_list[node]["input"];
		var outputs = port_list[node]["output"];
		for(var i in inputs)
			ret[node + "@" + inputs[i]] = __service_port_type(obj, nid, inputs[i]);
		for(var i in outputs)
			ret[node + "@" + outputs[i]] = __service_port_type(obj, nid, outputs[i]);
	}
	return ret;
}

Service.init_servlet = function init_servlet(servlet_name, params) 
{
	var ret = servlet_name ;

	var escape = function escape(str) 
	{
		var ret = "";
		for(var i = 0; i < len(str); i ++)
		{
			var ch = substr(str, i, i + 1);
			if(ch == " ")
				ret += "\\ ";
			else if(ch == "\\")
				ret += "\\\\";
			else
				ret += ch;
		}
		return ret;
	}

	for(var key in params)
	{
		var val = params[key];

		if(val == undefined)
			ret += " --" + key;
		else
			ret += " --" + key + " " + escape(val);
	}

	return ret;
}
