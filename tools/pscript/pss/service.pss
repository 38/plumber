/**
 * Copyright (C) 2017, Hao Hou
 * The service utilities
 **/
Service.for_each_element = function(serv, handler)
{
	var _get_func = function(name)
	{
		var ret = handler[name];
		if(ret == undefined) return function(){};
		return ret;
	}
	var node_handle = _get_func("node");
	var pipe_handle = _get_func("pipe");
	var port_handle = _get_func("port");
	var input_handle = _get_func("input");
	var output_handle = _get_func("output");
	for(var key in serv)
	{
		var sp = split(key, "@");
		var lsp = len(sp);
		if(lsp == 1) 
			node_handle(key, serv[key]);
		else if(sp[0] == "")
		{
			if(lsp == 2)
			{
				var src_node = sp[1];
				var dests = serv[key];
				for(var src_port in dests)
				{
					/* Key is port name and value should be nodeName@portName */
					var dsp = split(dests[src_port], "@");
					var dst_node = dsp[0];
					var dst_port = dsp[1];
					pipe_handle(src_node, src_port, dst_node, dst_port);
				}
			}
			else if(lsp == 3)
			{
				var dst = split(serv[key], "@");
				var dst_node = dst[0];
				var dst_port = dst[1];
				if(sp[1] == "input")
				{
					if(sp[2] == "") input_handle(dst_node, dst_port);
					else port_handle(sp[2], dst_node, dst_port);
				}
				else if(sp[1] == "output")
				{
					if(sp[2] == "") output_handle(dst_node, dst_port);
					else port_handle(sp[2], dst_node, dst_port);
				}
			}
		}
	}
}
Service.build = function(serv)
{
	var _build = function _build_impl(serv, obj, build) 
	{
		var nodes = {};
		var ports = {};
		var _deref_port = function _deref_port(node, port)
		{
			var nid = nodes[node];
			if(typeof(nid) == "dict") return nid[port];
			return {node: nid, port: port};
		};
		var node_handler = function _node_handler(name, def)
		{
			if(typeof(def) == "dict")
				nodes[name] = build(def, obj, build);
			else
				nodes[name] = __service_node(obj, def);
		};
		var pipe_handler = function _pipe_handler(src_node, src_port, dst_node, dst_port) 
		{
			var src = _deref_port(src_node, src_port);
			var dst = _deref_port(dst_node, dst_port);
			__service_pipe(obj, src["node"], src["port"], dst["node"], dst["port"]);
		};
		var port_handler = function _port_handler(name, node, port)
		{
			ports[name] = _deref_port(node, port);
		};
		var input_handler = function _input_handler(node, port)
		{
			var target = _deref_port(node, port);
			__service_input(obj, target["node"], target["port"]);
		};
		var output_handler = function _output_handler(node, port)
		{
			var target = _deref_port(node, port);
			__service_output(obj, target["node"], target["port"]);
		};

		Service.for_each_element(serv, {node: node_handler}); 
		Service.for_each_element(serv, {pipe: pipe_handler, port: port_handler, input: input_handler, output: output_handler});
		return ports;
	}
	
	return function Service.build(serv) {
		var obj = __service_new();
		_build(serv, obj, _build);
		return obj;
	}
}();
