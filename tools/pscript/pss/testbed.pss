/**
 * Copyright (C) 2017, Hao Hou
 * The module testing utiles
 **/
import("service");
/**
 * @brief Embed a logic servlet / binary servlet to the testbed
 * @param graph The graph to test
 * @param in_ports The ports and types that accepts the input: Key is the name, Value is the type
 * @param out_port The ports and types that accepts the output: Key is the name, Value is the type
 * @return The service graph used for testing
 * @note This function can be used to create a testing application graph that runs the logic to test.
 *       It typically used with the simulation module, which reads and writes event to files.
 *       The application graph will expected the JSONified inputs and preduce JSONifed output.
 **/
Testbed.embed = function embed(graph, in_ports, out_ports)
{
	var src_servlet = "typing/conversion/json --raw --from-json";
	var dst_servlet = "typing/conversion/json --raw --to-json";

	for(var name in in_ports)
	{
		var type = in_ports[name];
		src_servlet += " " + name  + ":" + type;
	}

	for(var name in out_ports)
	{
		var type = out_ports[name];
		dst_servlet += " " + name + ":" + (function(t) {
			if(t == undefined)
				return "$T";
			return t;
		})(type);
	}

	var ret = {
		source := src_servlet;
		sink   := dst_servlet;
		graph  := graph;
		() -> "json" source;
		sink "json" -> ();
	};

	for(var name in in_ports)
		Service.add_pipe(ret, "source", name, name, "graph");

	for(var name in out_ports)
		Service.add_pipe(ret, "graph", name, name, "sink");

	return ret;
}
